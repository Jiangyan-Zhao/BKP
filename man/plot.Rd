% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_BKP.R, R/plot_DKP.R
\name{plot}
\alias{plot}
\alias{plot.BKP}
\alias{plot.DKP}
\title{Plot a Beta Kernel Process (BKP) Model}
\usage{
\method{plot}{BKP}(x, only_mean = FALSE, ...)

\method{plot}{DKP}(x, ...)
}
\arguments{
\item{x}{An object of class \code{"DKP"}, typically returned by the
\code{\link{fit.DKP}} function.}

\item{only_mean}{Only plot the predicted mean graphs (for 2D).}

\item{...}{Additional arguments passed to generic plot functions (currently
not used, included for S3 method consistency).}
}
\description{
Visualizes the fitted Beta Kernel Process (BKP) model according
to the dimensionality of the covariate matrix \code{X}. For 1-dimensional input,
the function plots the estimated probability curve with confidence
intervals and observed data points. For 2-dimensional input, it produces
contour plots for the estimated mean, confidence bounds, and uncertainty.

Visualizes the fitted Dirichlet Kernel Process (DKP) model according
to the dimensionality of the covariate matrix \code{X}. For 1-dimensional input,
the function plots the estimated probability curves with confidence
intervals and observed data points. For 2-dimensional input, it produces
contour plots for the estimated mean, confidence bounds, and uncertainty.
}
\details{
The plotting behavior depends on the dimensionality of the
covariates \code{X} in the fitted BKP model:
\itemize{
\item \strong{1D covariates:} Produces a line plot of the predicted probability across the input domain.
A shaded region represents the confidence interval (default 95\%), and the observed proportions \code{y/m}
are added as points.
\item \strong{2D covariates:} Generates a 2x2 grid of contour plots showing the predicted mean, upper bound,
lower bound, and the width of the confidence interval (uncertainty).
}

If the dimension of \code{X} exceeds 2, the function will stop with an
informative error.

The plotting behavior depends on the dimensionality of the
covariates \code{X} in the fitted DKP model:
\itemize{
\item \strong{1D covariates:} Produces line plots of the predicted probability across the input domain.
A shaded region represents the confidence interval (default 95\%), and the observed proportions \code{y/m}
are added as points.
\item \strong{2D covariates:} Generates a 2x2 grid of contour plots showing the predicted mean, upper bound,
lower bound, and the width of the confidence interval (uncertainty).
}

If the dimension of \code{X} exceeds 2, the function will stop with an
informative error.
}
\examples{
### 1D
set.seed(123)
n <- 30
Xbounds <- matrix(c(-2,2), nrow=1)
x <- tgp::lhs(n = n, rect = Xbounds)
m <- sample(100, n, replace = TRUE)
true_pi <- (1 + exp(-x^2) * cos(10 * (1 - exp(-x)) / (1 + exp(-x)))) / 2
y <- rbinom(n, size = m, prob = true_pi)
model1 <- fit.BKP(x, y, m, Xbounds=Xbounds)
plot(model1)

### 2D
set.seed(123)
n <- 100
f <- function(X) {
  if(is.null(nrow(X))) X <- matrix(X, nrow=1)
  m <- 8.6928
  s <- 2.4269
  x1 <- 4*X[,1]- 2
  x2 <- 4*X[,2]- 2
  a <- 1 + (x1 + x2 + 1)^2 *
    (19- 14*x1 + 3*x1^2- 14*x2 + 6*x1*x2 + 3*x2^2)
  b <- 30 + (2*x1- 3*x2)^2 *
    (18- 32*x1 + 12*x1^2 + 48*x2- 36*x1*x2 + 27*x2^2)
  f <- log(a*b)
  f <- (f- m)/s
  return(f) }
Xbounds <- matrix(c(0, 0, 1, 1), nrow = 2)
x <- tgp::lhs(n = n, rect = Xbounds)
m <- sample(100, n, replace = TRUE)
true_pi <- pnorm(f(x))
y <- rbinom(n, size = m, prob = true_pi)
model2 <- fit.BKP(x, y, m)
plot(model2)

### 1D
set.seed(123)
n <- 30
Xbounds <- matrix(c(-2,2), nrow=1)
x <- tgp::lhs(n = n, rect = Xbounds)
true_pi <- (1 + exp(-x^2) * cos(10 * (1 - exp(-x)) / (1 + exp(-x)))) / 2
true_pi <- matrix(c(true_pi/2,true_pi/2,1-true_pi),nrow = n, byrow = FALSE)
m <- sample(100, n, replace = TRUE)
Y <- matrix(0, nrow = n, ncol = 3)
for (i in 1:n) {
  Y[i, ] <- rmultinom(n=1, size=m[i], prob=true_pi[i, ])
}
DKPmodel <- fit.DKP(x, Y, Xbounds = Xbounds)
plot(DKPmodel)

### 2D
set.seed(123)
n <- 100
f <- function(X) {
  if(is.null(nrow(X))) X <- matrix(X, nrow=1)
  m <- 8.6928
  s <- 2.4269
  x1 <- 4*X[,1]- 2
  x2 <- 4*X[,2]- 2
  a <- 1 + (x1 + x2 + 1)^2 *
    (19- 14*x1 + 3*x1^2- 14*x2 + 6*x1*x2 + 3*x2^2)
  b <- 30 + (2*x1- 3*x2)^2 *
    (18- 32*x1 + 12*x1^2 + 48*x2- 36*x1*x2 + 27*x2^2)
  f <- log(a*b)
  f <- (f- m)/s
  return(f) }
Xbounds <- matrix(c(0, 0, 1, 1), nrow = 2)
x <- tgp::lhs(n = n, rect = Xbounds)
true_pi <- pnorm(f(x))
true_pi <- matrix(c(true_pi/2,true_pi/2,1-true_pi),nrow = n, byrow = FALSE)
m <- sample(100, n, replace = TRUE)
Y <- matrix(0, nrow = n, ncol = 3)
for (i in 1:n) {
  Y[i, ] <- rmultinom(n=1, size=m[i], prob=true_pi[i, ])
}
DKPmodel <- fit.DKP(x, Y, Xbounds = Xbounds)
plot(DKPmodel)

}
\seealso{
\code{\link{fit.BKP}} for fitting a BKP model.
\code{\link{predict.BKP}} for generating predictions from a BKP model.

\code{\link{fit.DKP}} for fitting a DKP model.
\code{\link{predict.DKP}} for generating predictions from a DKP model.
}
\author{
Jiangyan Zhao, Kunhai Qing, Jin Xu
}
\keyword{BKP}
\keyword{DKP}
