% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate_BKP.R, R/simulate_DKP.R
\name{simulate}
\alias{simulate}
\alias{simulate.BKP}
\alias{simulate.DKP}
\title{Simulate method for Beta Kernel Process (BKP) models}
\usage{
\method{simulate}{BKP}(object, Xnew, n_sim = 1, threshold = NULL, seed = NULL, ...)

\method{simulate}{DKP}(object, Xnew, n_sim = 1, threshold = NULL, seed = NULL, ...)
}
\arguments{
\item{object}{A fitted DKP model object from \code{\link{fit.DKP}}.}

\item{Xnew}{A matrix (or vector) of new input points at which to simulate.}

\item{n_sim}{Number of simulation replicates (default = 1).}

\item{threshold}{Classification threshold for labeling (default = NULL)}

\item{seed}{Optional random seed for reproducibility.}

\item{...}{Additional arguments (currently unused).}
}
\value{
A matrix of dimension \code{nrow(Xnew) x n_sim}:
\itemize{
\item If \code{threshold = NULL}, each column contains simulated success probabilities.
\item If \code{threshold} is provided, the matrix contains binary class labels (0/1).
}

A array of dimension \code{n_sim x q x nrow(Xnew)}:
\itemize{
\item If \code{threshold = NULL}, for every fold, each row contains simulated success probabilities.
\item If \code{threshold} is provided, every fold contains multinomial class labels .
}
}
\description{
Generate random samples from the posterior Beta distributions
of a fitted BKP model at new input locations. Optionally return
classification labels based on a threshold.

Generate random samples from the posterior Dirichlet distributions
of a fitted DKP model at new input locations. Optionally return
classification labels based on a threshold.
}
\examples{
## 1D example: simulate probabilities and classifications
set.seed(123)
n <- 30
x <- seq(-2, 2, length = n)
true_pi <- (1 + exp(-x^2) * cos(10 * (1 - exp(-x)) / (1 + exp(-x)))) / 2
m <- sample(50:100, n, replace = TRUE)
y <- rbinom(n, size = m, prob = true_pi)
df <- data.frame(x = x, y = y, m = m)
Xbounds <- matrix(c(-2, 2), nrow = 1)
model <- fit.BKP(df, Xbounds = Xbounds)

# Simulate 5 posterior draws of success probabilities at new points
Xnew <- matrix(seq(-2, 2, length.out = 10), ncol = 1)
simulate(model, Xnew, n_sim = 5)

# Simulate 5 posterior binary classifications using threshold 0.5
simulate(model, Xnew, n_sim = 5, threshold = 0.5)

### 1D
set.seed(123)
n <- 30
Xbounds <- matrix(c(-2,2), nrow=1)
x <- tgp::lhs(n = n, rect = Xbounds)
true_pi <- (1 + exp(-x^2) * cos(10 * (1 - exp(-x)) / (1 + exp(-x)))) / 2
true_pi <- matrix(c(true_pi/2,true_pi/2,1-true_pi),nrow = n, byrow = F)
m <- sample(100, n, replace = TRUE)
Y <- matrix(0, nrow = n, ncol = 3)
for (i in 1:n) {
  Y[i, ] <- rmultinom(n=1, size=m[i], prob=true_pi[i, ])
}
DKPmodel <- fit.DKP(p=3,X=x,Y=Y,Xbounds = Xbounds,prior = "noninformative",kernel = "gaussian",loss = "brier")
simulate(DKPmodel,Xnew = 0.5, n_sim = 5)

}
\author{
Jiangyan Zhao, Kunhai Qing, Jin Xu
}
\keyword{BKP}
\keyword{DKP}
