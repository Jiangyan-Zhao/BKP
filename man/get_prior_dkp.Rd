% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_prior_dkp.R
\name{get_prior_dkp}
\alias{get_prior_dkp}
\title{Construct Prior Parameters for Dirichlet Kernel Process (DKP)}
\usage{
get_prior_dkp(
  prior = c("noninformative", "fixed", "adaptive"),
  r0 = 2,
  p0 = NULL,
  Y = NULL,
  K = NULL
)
}
\arguments{
\item{prior}{Type of prior: one of \code{"noninformative"}, \code{"fixed"}, or \code{"adaptive"}.}

\item{r0}{Global precision parameter (used in \code{"fixed"} and \code{"adaptive"}).}

\item{p0}{Global prior mean used when prior = "fixed".}

\item{Y}{A numeric vector of observed successes.}

\item{K}{A precomputed kernel matrix (n x n), typically from \code{kernel_matrix()}.}
}
\value{
A list with a numeric vectors: \code{alpha0} (of length n).
}
\description{
Constructs prior Dirichlet distribution parameters (alpha0) at each location
based on user-specified prior type: noninformative, fixed, or data-adaptive.
}
\examples{
# Simulated multi-class data
set.seed(123)
n <- 15           # number of training points
p <- 3            # number of classes
X <- matrix(runif(n * 2), ncol = 2)

# Simulate class probabilities and draw multinomial counts
true_pi <- t(apply(X, 1, function(x) {
  raw <- c(
    exp(-sum((x - 0.2)^2)),
    exp(-sum((x - 0.5)^2)),
    exp(-sum((x - 0.8)^2))
  )
  raw / sum(raw)
}))
m <- sample(10:20, n, replace = TRUE)
Y <- t(apply(true_pi, 1, function(p) rmultinom(1, size = sample(10:20, 1), prob = p)))

# Compute kernel matrix (e.g., Gaussian)
K <- kernel_matrix(X, theta = rep(0.2, 2), kernel = "gaussian")

# Construct prior (adaptive)
prior_dkp <- get_prior_dkp(prior = "adaptive", r0 = 2, Y = Y, K = K)
str(prior_dkp)

}
