% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/summary_BKP.R, R/summary_DKP.R
\name{summary}
\alias{summary}
\alias{summary.BKP}
\alias{summary.DKP}
\title{Summary of a BKP Model}
\usage{
\method{summary}{BKP}(object, ...)

\method{summary}{DKP}(object, ...)
}
\arguments{
\item{object}{An object of class \code{"DKP"}, typically returned by \code{\link{fit.DKP}}.}

\item{...}{Additional arguments passed to the generic \code{summary} method (not used here).}
}
\description{
Provides a summary of a fitted Beta Kernel Process (BKP) model.
Currently, this function serves as a wrapper for \code{\link{print.BKP}},
offering a concise overview of the model's key components and fitting
results.

Provides a summary of a fitted Beta Kernel Process (DKP) model.
Currently, this function serves as a wrapper for \code{\link{print.DKP}},
offering a concise overview of the model's key components and fitting results.
}
\details{
The \code{summary.BKP} method displays essential model details such
as the number of observations, input dimensionality, kernel type, optimized
kernel parameters, and the corresponding loss value (e.g., Brier score).
Future versions may expand this method to include more diagnostics,
confidence metrics, or model evaluation summaries.

The \code{summary.DKP} method displays essential model details such as the number of
observations, input dimensionality, kernel type, optimized kernel parameters,
and the corresponding loss value (e.g., Brier score). Future versions may expand this
method to include more diagnostics, confidence metrics, or model evaluation summaries.
}
\examples{
### 1D
set.seed(123)
n <- 30
Xbounds <- matrix(c(-2,2), nrow=1)
x <- tgp::lhs(n = n, rect = Xbounds)
m <- sample(100, n, replace = TRUE)
true_pi <- (1 + exp(-x^2) * cos(10 * (1 - exp(-x)) / (1 + exp(-x)))) / 2
y <- rbinom(n, size = m, prob = true_pi)
model1 <- fit.BKP(x, y, m, Xbounds=Xbounds)
summary(model1)

### 2D
set.seed(123)
n <- 100
f <- function(X) {
  if(is.null(nrow(X))) X <- matrix(X, nrow=1)
  m <- 8.6928
  s <- 2.4269
  x1 <- 4*X[,1]- 2
  x2 <- 4*X[,2]- 2
  a <- 1 + (x1 + x2 + 1)^2 *
    (19- 14*x1 + 3*x1^2- 14*x2 + 6*x1*x2 + 3*x2^2)
  b <- 30 + (2*x1- 3*x2)^2 *
    (18- 32*x1 + 12*x1^2 + 48*x2- 36*x1*x2 + 27*x2^2)
  f <- log(a*b)
  f <- (f- m)/s
  return(f) }
Xbounds <- matrix(c(0, 0, 1, 1), nrow = 2)
x <- tgp::lhs(n = n, rect = Xbounds)
m <- sample(100, n, replace = TRUE)
true_pi <- pnorm(f(x))
y <- rbinom(n, size = m, prob = true_pi)
model2 <- fit.BKP(x, y, m)
summary(model2)

### 1D
set.seed(123)
n <- 30
Xbounds <- matrix(c(-2,2), nrow=1)
x <- tgp::lhs(n = n, rect = Xbounds)
true_pi <- (1 + exp(-x^2) * cos(10 * (1 - exp(-x)) / (1 + exp(-x)))) / 2
true_pi <- matrix(c(true_pi/2,true_pi/2,1-true_pi),nrow = n, byrow = FALSE)
m <- sample(100, n, replace = TRUE)
Y <- matrix(0, nrow = n, ncol = 3)
for (i in 1:n) {
  Y[i, ] <- rmultinom(n=1, size=m[i], prob=true_pi[i, ])
}
DKPmodel <- fit.DKP(x, Y, Xbounds = Xbounds)
summary(DKPmodel)

### 2D
set.seed(123)
n <- 100
f <- function(X) {
  if(is.null(nrow(X))) X <- matrix(X, nrow=1)
  m <- 8.6928
  s <- 2.4269
  x1 <- 4*X[,1]- 2
  x2 <- 4*X[,2]- 2
  a <- 1 + (x1 + x2 + 1)^2 *
    (19- 14*x1 + 3*x1^2- 14*x2 + 6*x1*x2 + 3*x2^2)
  b <- 30 + (2*x1- 3*x2)^2 *
    (18- 32*x1 + 12*x1^2 + 48*x2- 36*x1*x2 + 27*x2^2)
  f <- log(a*b)
  f <- (f- m)/s
  return(f) }
Xbounds <- matrix(c(0, 0, 1, 1), nrow = 2)
x <- tgp::lhs(n = n, rect = Xbounds)
true_pi <- pnorm(f(x))
true_pi <- matrix(c(true_pi/2,true_pi/2,1-true_pi),nrow = n, byrow = FALSE)
m <- sample(100, n, replace = TRUE)
Y <- matrix(0, nrow = n, ncol = 3)
for (i in 1:n) {
  Y[i, ] <- rmultinom(n=1, size=m[i], prob=true_pi[i, ])
}
DKPmodel <- fit.DKP(x, Y, Xbounds = Xbounds)
summary(DKPmodel)

}
\seealso{
\code{\link{print.BKP}} for basic print output.
\code{\link{fit.BKP}} to fit a BKP model.

\code{\link{print.DKP}} for basic print output.
\code{\link{fit.DKP}} to fit a DKP model.
}
\author{
Jiangyan Zhao, Kunhai Qing, Jin Xu
}
\keyword{BKP}
\keyword{DKP}
